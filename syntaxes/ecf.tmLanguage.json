{
  "version": "v1",
  "name": "ecf",
  "scopeName": "source.ecf",
	"patterns": [
	  {
		  "include": "#comment"
	  },
    {
      "include": "#blockcomment"
    },
	  {
		  "include": "#block"
	  },
    {
      "include": "#versiondefinition"
    },
    {
      "include": "#properties"
    }
	],
  "repository": {
    "versiondefinition": {
      "comment": "optional version definition found in some files",
      "name": "version.source.ecf",
      "begin": "(Version:)\\ (\\S+)",
      "captures": {
        "1": { "name": "keyword.version.ecf" },
        "2": { "name": "constant.numeric.ecf" }
      },
      "end": "\\n"
    },
		"comment": {
			"begin": "(?:(^[ \\t]*)|[ \\t]+)(?=#\\p{Print}*$)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.ecf"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"name": "comment.line.number-sign.ecf",
					"begin": "(\\s*)(#)",
					"beginCaptures": {
						"2": {
							"name": "punctuation.definition.comment.ecf"
						}
					},
					"end": "\\n"
				}
			]
		},
		"blockcomment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\*)",
					"end": "\\*\\/",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.ecf"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.ecf"
						}
					},
					"name": "comment.block.ecf"
				}
			]
		},
    "block-id": {
      "name": "entity.id.tag.ecf",
      "match": "([iI]d)(:\\s*)(\\d+)",
      "captures": {
        "1": { "name": "entity.name.tag.ecf", "comment": "keyword id" },
        "2": { "name": "punctuation.ecf", "comment": "colon" },
        "3": { "name": "constant.numeric.ecf", "comment": "id value" }
      }
    },
    "block-name": {
      "name": "entity.name.tag.ecf",
      "match": "([nN]ame)(:\\s*)(\\w+)",
      "captures": {
        "1": { "name": "keyword.blockname.ecf", "comment": "keyword block name" },
        "2": { "name": "punctuation.ecf", "comment": "colon" },
        "3": { "name": "constant.character.ecf", "comment": "name value" }
      }
    },
    "block": {
      "name": "entity.block",
      "begin": "{\\s*(\\+)?(\\S+)",
      "beginCaptures": {
        "1": { "name": "punctuation.blocktype.prefix.ecf", "comment": "optional +" },
        "2": { "name": "entity.name.type.ecf", "comment": "keyword block type" }
      },
      "end": "}",
      "patterns": [
        {
          "include": "#block-id" 
        },
        {
          "include": "#block-name" 
        },
        {
          "include": "#properties" 
        },
        {
          "include": "#childblock"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#blockcomment"
        }
      ]
    },
    "childblock": {
      "name": "entity.childblock",
      "begin": "{\\s*\\+?\\s*(Child)\\s+?(\\w+)",
      "beginCaptures": {
        "0": { "name" : "entity.childblock.definition"},
        "1": { "name" : "entity.name.type.ecf"},
        "2": { "name" : "constant.character.ecf"}
      },
      "end": "}",
      "patterns": [
        {
          "include": "#properties"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#blockcomment"
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "include": "#property"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "property" : {
      "patterns": [
        {
          "name": "property.ecf",
          "match": "\\b(\\w+):\\s*([\\w\\./]+)",
          "captures": {
            "1": { "name": "keyword.other.ecf", "comment": "key" },
            "2": { "name": "string.unquoted.ecf", "comment": "value" }
          }
        },
        {
          "name": "property.quoted.ecf",
          "match": "\\b(\\w+):\\s*(\"[\\w,]+\")",
          "captures": {
            "1": { "name": "keyword.other.ecf", "comment": "key" },
            "2": { "name": "string.quoted.ecf", "comment": "value" }
          }
        },
        {
          "name": "property.model.ecf",
          "match": "\\b(\\w+):\\s*([\\w@/]+)",
          "captures": {
            "1": { "name": "keyword.other.ecf", "comment": "key" },
            "2": { "name": "string.other.ecf", "comment": "value" }
          }
        },
        {
          "name": "property.function.ecf",
          "match": "\\b(\\w+):\\s*(\".+\")",
          "captures": {
            "1": { "name": "keyword.other.ecf", "comment": "key" },
            "2": { "name": "string.other.ecf", "comment": "value" }
          }
        }
      ]
    }
  }
}